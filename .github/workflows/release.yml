name: Release
on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  deployments: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-22.04, windows-latest]
        arch: [x64, arm64]
        exclude:
          - platform: macos-latest
            arch: x64
          - platform: macos-latest
            arch: arm64
          - platform: ubuntu-22.04
            arch: arm64
        include:
          - platform: macos-latest
            arch: universal
    runs-on: ${{ matrix.platform }}
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Rust (Stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'windows-latest' && matrix.arch == 'arm64' && 'aarch64-pc-windows-msvc' || matrix.platform == 'macos-latest' && matrix.arch == 'universal' && 'aarch64-apple-darwin x86_64-apple-darwin' || '' }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "tauri-build-${{ matrix.platform }}-${{ matrix.arch || 'x64' }}"

      - name: Install Dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev

      - name: Install frontend dependencies
        run: npm install

      - name: Install macOS targets
        if: matrix.platform == 'macos-latest'
        run: |
          rustup target add x86_64-apple-darwin aarch64-apple-darwin

      - name: Setup Windows ARM64 environment
        if: matrix.platform == 'windows-latest' && matrix.arch == 'arm64'
        run: |
          echo "RUSTFLAGS=-C target-feature=+crt-static" >> $GITHUB_ENV

      - name: Build the app (Standard x64)
        if: matrix.arch == 'x64'
        uses: tauri-apps/tauri-action@v0
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true

      - name: Upload x64 artifacts
        if: matrix.arch == 'x64'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-artifacts
          path: |
            src-tauri/gen/*/metadata.json
            src-tauri/target/**/release/*.msi
            src-tauri/target/**/release/*.exe
            src-tauri/target/**/release/bundle/deb/*.deb
            src-tauri/target/**/release/bundle/appimage/*.AppImage
          if-no-files-found: warn

      - name: Build the app (WINDOWS ARM64)
        if: matrix.arch == 'arm64' && matrix.platform == 'windows-latest'
        uses: tauri-apps/tauri-action@v0
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true
          args: --target aarch64-pc-windows-msvc

      - name: Upload Windows ARM64 artifacts
        if: matrix.arch == 'arm64' && matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-arm64-artifacts
          path: |
            src-tauri/gen/aarch64-pc-windows-msvc/metadata.json
            src-tauri/target/aarch64-pc-windows-msvc/release/*.msi
            src-tauri/target/aarch64-pc-windows-msvc/release/*.exe
          if-no-files-found: warn

      - name: Import Apple Certificate
        if: matrix.platform == 'macos-latest'
        run: |
          echo "配置证书环境..."
          
          # 清理任何可能存在的旧keychain
          security delete-keychain build.keychain || true
          
          # 创建新的临时keychain
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security list-keychains -d user -s build.keychain login.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          
          # 设置keychain超时时间，确保在构建过程中不会锁定
          security set-keychain-settings -t 3600 -l build.keychain
    
          echo "导入证书..."
          echo "${{ secrets.CERTIFICATES_P12 }}" | base64 --decode > certificate.p12
          security import certificate.p12 \
            -k build.keychain \
            -P "${{ secrets.CERTIFICATES_P12_PASSWORD }}" \
            -T /usr/bin/codesign \
            -T /usr/bin/security
    
          echo "设置keychain分区列表..."
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign: \
            -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" \
            build.keychain
    
          echo "验证证书导入情况..."
          security find-identity -v build.keychain

      - name: Build the app (macOS universal)
        if: matrix.platform == 'macos-latest' && matrix.arch == 'universal'
        uses: tauri-apps/tauri-action@v0
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.14
        with:
          tagName: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('dev-{0}', github.sha) }}
          releaseName: ${{ startsWith(github.ref, 'refs/tags/') && format('OpenFrp CPL v{0}', github.ref_name) || format('Development Build ({0})', github.sha) }}
          releaseBody: ${{ startsWith(github.ref, 'refs/tags/') && '请查看 [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) 了解更新内容。' || format('开发构建 - 提交信息：{0}', github.event.head_commit.message) }}
          releaseDraft: ${{ startsWith(github.ref, 'refs/tags/') }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          includeRelease: true
          includeUpdaterJson: true
          args: --target universal-apple-darwin

      - name: Upload macOS artifacts
        if: matrix.platform == 'macos-latest' && matrix.arch == 'universal'
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal-artifacts
          path: |
            src-tauri/gen/universal-apple-darwin/metadata.json
            src-tauri/target/universal-apple-darwin/release/bundle/**/*.dmg
            src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app
            src-tauri/target/*.dmg
            src-tauri/target/*.zip
          if-no-files-found: warn

      - name: Re-sign with Entitlements (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          # 应用路径
          APP_PATH="/Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/universal-apple-darwin/release/bundle/macos/OpenFrp-CrossPlatformLauncher.app"
          ENTITLEMENTS_PATH="$(pwd)/macos.entitlements"
          
          echo "检查entitlements文件："
          cat "${ENTITLEMENTS_PATH}"

          codesign --force --deep --timestamp --options runtime --entitlements "${ENTITLEMENTS_PATH}" --sign "Developer ID Application: Enjie Ye (W6D36R8RMG)" "${APP_PATH}"
          
          # 验证签名
          codesign -dvvv "${APP_PATH}"

      - name: Create and Sign DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        id: create_dmg
        run: |
          echo "创建DMG包..."
          # 设置路径变量
          APP_PATH="/Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/universal-apple-darwin/release/bundle/macos/OpenFrp-CrossPlatformLauncher.app"
          DMG_PATH="/Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/OpenFrp-CrossPlatformLauncher.dmg"
          TEMP_DMG_PATH="/Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/temp.dmg"
          
          # 确保应用已签名
          echo "检查应用签名状态..."
          codesign -dvv "${APP_PATH}" || echo "应用可能未正确签名，但会继续尝试"
          
          # 检查目标路径是否存在
          [ -d "${APP_PATH}" ] || { echo "应用不存在于路径: ${APP_PATH}"; exit 1; }
          
          # 清理可能存在的旧文件
          echo "清理可能存在的旧DMG文件..."
          rm -f "${DMG_PATH}" "${TEMP_DMG_PATH}"
          
          # 等待一会儿确保资源释放
          sleep 3
          
          # 尝试直接创建DMG，跳过临时DMG步骤
          echo "直接创建DMG..."
          if ! hdiutil create -volname "OpenFrp-CPL" -srcfolder "${APP_PATH}" -ov -format UDZO "${DMG_PATH}"; then
            echo "直接创建DMG失败，尝试创建ZIP包作为备选..."
            ZIP_PATH="/Users/runner/work/OpenFrp-CrossPlatformLauncher/OpenFrp-CrossPlatformLauncher/src-tauri/target/OpenFrp-CrossPlatformLauncher.zip"
            ditto -c -k --keepParent "${APP_PATH}" "${ZIP_PATH}"
            echo "zip_path=${ZIP_PATH}" >> $GITHUB_OUTPUT
            echo "dmg_path=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 显示证书信息进行调试
          echo "可用证书信息："
          security find-identity -v build.keychain
          
          # 尝试签名DMG
          echo "签名DMG..."
          codesign --force --sign "Developer ID Application: Enjie Ye (W6D36R8RMG)" --keychain build.keychain --timestamp --verbose "${DMG_PATH}" || {
            echo "第一次签名尝试失败，重试使用详细模式..."
            
            # 第二次尝试，更详细的输出
            codesign --force --sign "Developer ID Application: Enjie Ye (W6D36R8RMG)" --keychain build.keychain --timestamp --verbose=4 "${DMG_PATH}" || {
              echo "签名再次失败，但会继续处理..."
            }
          }
          
          echo "检查DMG签名状态..."
          codesign -dvv "${DMG_PATH}" || echo "DMG签名验证失败，但将继续处理"
          
          echo "dmg_path=${DMG_PATH}" >> $GITHUB_OUTPUT

      - name: Notarize DMG (macOS only)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "准备公证DMG文件..."
          if [ ! -f "${{ steps.create_dmg.outputs.dmg_path }}" ]; then
            echo "DMG文件不存在，跳过公证步骤"
            exit 0
          fi
          
          # 检查DMG基本信息
          echo "DMG文件信息："
          ls -la "${{ steps.create_dmg.outputs.dmg_path }}"
          file "${{ steps.create_dmg.outputs.dmg_path }}"
          
          # 尝试公证
          echo "提交公证请求..."
          NOTARIZATION_INFO=$(mktemp)
          
          # 使用xcrun altool作为备选方案
          if ! xcrun notarytool submit "${{ steps.create_dmg.outputs.dmg_path }}" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_SPECIFIC_PASSWORD }}" \
            --team-id "${{ secrets.TEAM_ID }}" \
            --wait --timeout 1200 > "${NOTARIZATION_INFO}" 2>&1; then
            
            echo "notarytool失败，尝试使用altool..."
            xcrun altool --notarize-app \
              --primary-bundle-id "org.openfrp.cpl" \
              --username "${{ secrets.APPLE_ID }}" \
              --password "${{ secrets.APPLE_SPECIFIC_PASSWORD }}" \
              --team-id "${{ secrets.TEAM_ID }}" \
              --file "${{ steps.create_dmg.outputs.dmg_path }}" > "${NOTARIZATION_INFO}" 2>&1 || {
                echo "公证失败，但将继续构建"
                exit 0
              }
          fi
          
          echo "公证输出："
          cat "${NOTARIZATION_INFO}"
          
          # 即使公证失败也继续处理
          echo "尝试添加公证戳章..."
          xcrun stapler staple "${{ steps.create_dmg.outputs.dmg_path }}" || echo "添加公证戳章失败，但将继续构建"
          
          # 验证结果
          echo "验证签名和公证状态..."
          xcrun stapler validate "${{ steps.create_dmg.outputs.dmg_path }}" || echo "验证失败，但将继续构建"
          spctl --assess --type open --context context:primary-signature -v "${{ steps.create_dmg.outputs.dmg_path }}" || echo "spctl验证失败，但将继续构建"
          
          # 为已签名和公证的DMG文件重命名，添加signed标识
          if [ -f "${{ steps.create_dmg.outputs.dmg_path }}" ]; then
            ORIGINAL_DMG_PATH="${{ steps.create_dmg.outputs.dmg_path }}"
            SIGNED_DMG_PATH="${ORIGINAL_DMG_PATH%.dmg}_signed.dmg"
            echo "重命名DMG文件，添加signed标识..."
            cp "${ORIGINAL_DMG_PATH}" "${SIGNED_DMG_PATH}"
            echo "signed_dmg_path=${SIGNED_DMG_PATH}" >> $GITHUB_OUTPUT
            ls -la "${SIGNED_DMG_PATH}"
          fi

      - name: Upload signed DMG to Release (macOS only)
        if: matrix.platform == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        run: |
          if [ -f "${{ steps.create_dmg.outputs.dmg_path }}" ]; then
            echo "DMG文件存在，准备上传"
            # 添加调试信息
            echo "DMG文件路径: ${{ steps.create_dmg.outputs.dmg_path }}"
            ls -la "${{ steps.create_dmg.outputs.dmg_path }}"
            
            # 保留原始文件名并添加_signed标识
            ORIGINAL_DMG_NAME=$(basename "${{ steps.create_dmg.outputs.dmg_path }}")
            SIGNED_DMG_NAME="${ORIGINAL_DMG_NAME%.dmg}_signed.dmg"
            cp "${{ steps.create_dmg.outputs.dmg_path }}" "./${SIGNED_DMG_NAME}"
            
            # 上传带signed标识的DMG
            echo "上传带signed标识的DMG文件..."
            gh release upload ${{ github.ref_name }} "./${SIGNED_DMG_NAME}" --clobber
          else
            echo "DMG文件不存在，跳过上传"
          fi
            
            # 如果ZIP文件存在，也上传
            if [ -n "${{ steps.create_dmg.outputs.zip_path }}" ] && [ -f "${{ steps.create_dmg.outputs.zip_path }}" ]; then
              echo "ZIP文件存在，准备上传"
              gh release upload ${{ github.ref_name }} "${{ steps.create_dmg.outputs.zip_path }}" --clobber || echo "上传ZIP失败"
            fi
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary files to release
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # 暂时不做这步，后面的post process其实有
          echo "暂时不做这步，后面的post process其实有😂。"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  process-updates:
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: find artifacts -type f | sort

      - name: Fix AppImage permissions
        run: |
          find artifacts -name "*.AppImage" -type f | while read -r file; do
            chmod +x "$file"
          done

      - name: Upload artifacts to release
        run: |
          echo "上传构建产物到GitHub Release..."
          
          # 创建存放文件的临时目录
          mkdir -p release_files
          
          # 复制所有二进制文件和签名文件
          find artifacts -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.dmg" -o -name "*.zip" -o -name "*.sig" \) | while read -r file; do
            filename=$(basename "$file")
            echo "处理文件: $filename"
            cp "$file" "release_files/$filename"
            
            # 为AppImage文件添加可执行权限
            if [[ "$filename" == *.AppImage ]]; then
              chmod +x "release_files/$filename"
            fi
          done
          
          # 上传所有文件到GitHub Release
          cd release_files
          for file in *; do
            if [ -f "$file" ]; then
              echo "上传 $file 到 GitHub Release"
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create update.json
        run: |
          # 获取版本号(去掉v前缀)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          
          # 基础URL
          BASE_URL="https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}"
          
          # 创建update.json
          cat > update.json << EOF
          {
            "version": "$VERSION",
            "notes": "请查看CHANGELOG.md了解更新内容。",
            "pub_date": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "platforms": {
              "windows-x86_64": {
                "signature": "",
                "url": "$BASE_URL/OpenFrp-CrossPlatformLauncher_${VERSION}_x64.msi"
              },
              "windows-aarch64": {
                "signature": "",
                "url": "$BASE_URL/OpenFrp-CrossPlatformLauncher_${VERSION}_arm64.msi"
              },
              "darwin-universal": {
                "signature": "",
                "url": "$BASE_URL/OpenFrp-CrossPlatformLauncher_${VERSION}_universal.dmg"
              },
              "linux-x86_64": {
                "signature": "",
                "url": "$BASE_URL/OpenFrp-CrossPlatformLauncher_${VERSION}_amd64.AppImage"
              }
            }
          }
          EOF
          
          # 读取签名文件并更新update.json
          echo "查找签名文件并更新update.json..."
          
          # Windows x64
          if [ -f "release_files/OpenFrp-CrossPlatformLauncher_${VERSION}_x64.msi.sig" ]; then
            WIN64_SIG=$(cat "release_files/OpenFrp-CrossPlatformLauncher_${VERSION}_x64.msi.sig")
            sed -i "s|\"windows-x86_64\": {\n.*\"signature\": \"\"|\"windows-x86_64\": {\n        \"signature\": \"$WIN64_SIG\"|" update.json
          fi
          
          # Windows ARM64
          if [ -f "release_files/OpenFrp-CrossPlatformLauncher_${VERSION}_arm64.msi.sig" ]; then
            WINARM_SIG=$(cat "release_files/OpenFrp-CrossPlatformLauncher_${VERSION}_arm64.msi.sig")
            sed -i "s|\"windows-aarch64\": {\n.*\"signature\": \"\"|\"windows-aarch64\": {\n        \"signature\": \"$WINARM_SIG\"|" update.json
          fi
          
          # macOS
          if [ -f "release_files/OpenFrp-CrossPlatformLauncher_${VERSION}_universal.dmg.sig" ]; then
            MAC_SIG=$(cat "release_files/OpenFrp-CrossPlatformLauncher_${VERSION}_universal.dmg.sig")
            sed -i "s|\"darwin-universal\": {\n.*\"signature\": \"\"|\"darwin-universal\": {\n        \"signature\": \"$MAC_SIG\"|" update.json
          fi
          
          # Linux
          if [ -f "release_files/OpenFrp-CrossPlatformLauncher_${VERSION}_amd64.AppImage.sig" ]; then
            LINUX_SIG=$(cat "release_files/OpenFrp-CrossPlatformLauncher_${VERSION}_amd64.AppImage.sig")
            sed -i "s|\"linux-x86_64\": {\n.*\"signature\": \"\"|\"linux-x86_64\": {\n        \"signature\": \"$LINUX_SIG\"|" update.json
          fi
          
          echo "生成的update.json文件内容:"
          cat update.json
          
          # 上传update.json到GitHub Release
          gh release upload ${{ github.ref_name }} update.json --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Write Tauri private key for updater signature
        if: env.TAURI_SIGNING_PRIVATE_KEY != ''
        run: |
          echo "$TAURI_SIGNING_PRIVATE_KEY" > src-tauri/private.key