<script lang="ts" setup>
import { h, ref } from 'vue';

import dayjs from 'dayjs';
import {
  DataTableColumn,
  NEllipsis,
  NIcon,
  NProgress,
  NSpace,
  NTag,
  useLoadingBar,
  useMessage,
} from 'naive-ui';
import numbro from 'numbro';

import frpApiGetNodeStatus from '@/requests/frpApi/frpApiGetNodeStatus';
import { CarOutline } from '@vicons/ionicons5';
import {
  CalendarTime,
  Download,
  ExternalLink,
  List,
  Refresh,
  Server,
  Upload,
  Users,
} from '@vicons/tabler';

const sourceList = ref<Struct.NodeState[]>([]);
const all_total_traffic_in = ref(0);
const all_total_traffic_out = ref(0);
const all_total_user = ref(0);
const all_total_proxy = ref(0);
const all_total_node = ref(0);
const lastUpdate = ref(0);

const storeShowMode = localStorage.getItem('detailMode');
const detailMode = ref<boolean>(storeShowMode ? storeShowMode === 'true' : true); // 默认true

const message = useMessage();
const loadingBar = useLoadingBar();
const skeletons = ref(false);

const getOnlineCount = (str: string) => {
  let parsedStr: any = {};
  try {
    parsedStr = JSON.parse(str);
  } catch {
    // Empty block
  }
  let count = 0;
  Object.keys(parsedStr).forEach((key) => {
    count += parsedStr[key];
  });
  return count;
};

const getProgress = (now: number, max: number) => {
  if (now >= max || max === 0) {
    return 100;
  } else {
    return Math.round((now / max) * 100);
  }
};

const getColor = (percent: number) => {
  if (percent < 30) {
    return 'success';
  } else if (percent < 60) {
    return 'info';
  } else if (percent < 90) {
    return 'warning';
  } else {
    return 'error';
  }
};
const codeToState = (code: number) => {
  switch (code) {
    case 200: {
      return { text: '正常', type: 'success' };
    }
    case 204: {
      return { text: '隐藏', type: 'warning' };
    }
    case 401: {
      return { text: '禁用', type: 'error' };
    }
    case 501: {
      return { text: '维护', type: 'warning' };
    }
    case 500: {
      return { text: '离线', type: 'error' };
    }
    case 503: {
      return { text: '异常', type: 'error' };
    }
    case 504: {
      return { text: '超时', type: 'error' };
    }
    default: {
      break;
    }
  }
};

const refreshStatus = () => {
  getNodeStatus();
  message.success('已刷新数据');
};

const getNodeStatus = () => {
  skeletons.value = false;
  loadingBar.start();
  frpApiGetNodeStatus().then((res) => {
    if (res.flag) {
      sourceList.value = res.data || [];
      lastUpdate.value = res.data[0].last_update;
      all_total_traffic_in.value = 0;
      all_total_traffic_out.value = 0;
      all_total_user.value = 0;
      all_total_proxy.value = 0;
      all_total_node.value = 0;

      // 将每个节点的 total_traffic_in 累加到 all_total_traffic_in
      res.data.forEach((item: any) => {
        all_total_traffic_in.value += item.total_traffic_in || 0;
        all_total_traffic_out.value += item.total_traffic_out || 0;
        all_total_user.value += item.client_counts || 0;
        all_total_proxy.value += getOnlineCount(item.proxy_type_count) || 0;
        if (item.version !== '') all_total_node.value += 1;
        if (item.last_update && item.last_update > 0) {
          lastUpdate.value = item.last_update;
        }
      });

      // console.log(res.data);
      loadingBar.finish();
      skeletons.value = true;
    } else {
      message.error(res.msg);
      loadingBar.error();
    }
  });
};

const handleModeChange = () => {
  localStorage.setItem('detailMode', detailMode.value.toString());
  if (detailMode.value) {
    scrollX.value = 1800;
    showStatusColumns.value = fullStatusColumns;
  } else {
    scrollX.value = 0;
    showStatusColumns.value = filterArray(fullStatusColumns, simpleModeColumns);
  }
};

const scrollX = ref<number | string>(0);
const simpleModeColumns = ['loaded', 'traffic', 'proxies', 'uptimes'];

function filterArray(originalArray: any, keys: string[]) {
  const result: any = [];
  for (const obj of originalArray) {
    for (const key of keys) {
      if (obj.key === key) {
        result.push(obj);
        break;
      }
    }
  }
  return result;
}

const showStatusColumns = ref<any>([]);

const fullStatusColumns: DataTableColumn[] | any = [
  {
    title: '节点负载',
    key: 'loaded',
    resizable: true,
    width: 180,
    align: 'left',
    render(row: Struct.NodeState) {
      const ctse = codeToState(row.status);
      return h('div', {}, [
        h(
          NSpace,
          {
            style: {
              display: 'flex',
              flexDirection: 'row',
              justifyContent: 'space-between',
              marginBottom: '2px',
            },
          },
          [
            h('span', `${row.nid} # ${row.name}`),
            h(
              NTag,
              {
                bordered: false,
                type:
                  ctse?.type == 'warning' ? 'warning' : ctse?.type == 'error' ? 'error' : 'success',
                size: 'small',
              },
              () => ctse?.text,
            ),
          ],
        ),
        h(
          NProgress,
          {
            type: 'line',
            percentage: getProgress(getOnlineCount(row.proxy_type_count), row.maxonline),
            status: getColor(getProgress(getOnlineCount(row.proxy_type_count), row.maxonline)),
            indicatorPlacement: 'inside',
          },
          {},
        ),
      ]);
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return (
        getProgress(getOnlineCount(row1.proxy_type_count), row1.maxonline) -
        getProgress(getOnlineCount(row2.proxy_type_count), row2.maxonline)
      );
    },
  },
  {
    title: '运行版本',
    key: 'version',
    resizable: true,
    width: 179,
    render(row: Struct.NodeState) {
      return h(NEllipsis, {}, { default: () => row.version });
    },
    sorter: 'default',
  },
  {
    title: '今日流量',
    key: 'traffic',
    width: 120,
    render(row: Struct.NodeState) {
      return h('div', {}, [
        h(
          'div',
          {
            style: {
              display: 'flex',
              alignItems: 'center',
            },
          },
          [
            h(
              NIcon,
              {
                component: Upload,
                style: {
                  paddingRight: '6px',
                },
              },
              {},
            ),
            h(
              'span',
              {},
              () =>
                numbro(row.total_traffic_out).format({
                  output: 'byte',
                  base: 'binary',
                  mantissa: 2,
                  spaceSeparated: true,
                })
            ),
          ],
        ),
        h(
          'div',
          {
            style: {
              display: 'flex',
              alignItems: 'center',
            },
          },
          [
            h(
              NIcon,
              {
                component: Download,
                style: {
                  paddingRight: '6px',
                },
              },
              {},
            ),
            h(
              'span',
              {},
              () =>
                numbro(row.total_traffic_in).format({
                  output: 'byte',
                  base: 'binary',
                  mantissa: 2,
                  spaceSeparated: true,
                })
            ),
          ],
        ),
      ]);
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return (
        row1.total_traffic_in +
        row1.total_traffic_out -
        (row2.total_traffic_in + row2.total_traffic_out)
      );
    },
  },
  {
    title: '在线用户',
    key: 'clients',
    resizable: true,
    width: 100,
    render(row: Struct.NodeState) {
      return h('span', {}, { default: () => row.client_counts });
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return row1.client_counts - row2.client_counts;
    },
  },
  {
    title: '在线隧道',
    key: 'proxies',
    resizable: true,
    width: 100,
    render(row: Struct.NodeState) {
      return h('span', {}, { default: () => getOnlineCount(row.proxy_type_count) });
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return getOnlineCount(row1.proxy_type_count) - getOnlineCount(row2.proxy_type_count);
    },
  },
  {
    title: '连接数',
    key: 'conns',
    resizable: true,
    width: 90,
    render(row: Struct.NodeState) {
      return h('span', {}, { default: () => row.cur_conns });
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return row1.cur_conns - row2.cur_conns;
    },
  },
  {
    title: '在线时长',
    key: 'uptimes',
    width: 120,
    resizable: true,
    render(row: Struct.NodeState) {
      return h(
        'span',
        {},
        {
          default: () =>
            `${Math.floor(Number(row.uptime) / 3600 / 24)} 天 ${Math.floor((Number(row.uptime) / 3600) % 24)} 时`,
        },
      );
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return row1.uptime - row2.uptime;
    },
  },
  {
    title: 'Load 1',
    key: 'load1',
    resizable: true,
    width: 90,
    render(row: Struct.NodeState) {
      return h('span', {}, { default: () => row.load_1.toFixed(2) });
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return row1.load_1 - row2.load_1;
    },
  },
  {
    title: 'Load 5',
    key: 'load5',
    resizable: true,
    width: 90,
    render(row: Struct.NodeState) {
      return h('span', {}, { default: () => row.load_5.toFixed(2) });
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return row1.load_5 - row2.load_5;
    },
  },
  {
    title: 'Load 15',
    key: 'load15',
    resizable: true,
    width: 90,
    render(row: Struct.NodeState) {
      return h('span', {}, { default: () => row.load_15.toFixed(2) });
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return row1.load_15 - row2.load_15;
    },
  },
  {
    title: '内存占用',
    key: 'memused',
    resizable: true,
    width: 100,
    render(row: Struct.NodeState) {
      return h('span', {}, () => `${row.m_used_p.toFixed(0)} %`);
    },
    sorter: (row1: Struct.NodeState, row2: Struct.NodeState) => {
      return row1.m_used_p - row2.m_used_p;
    },
  },
  {
    title: '最后更新',
    key: 'latest',
    resizable: true,
    width: 160,
    render(row: Struct.NodeState) {
      return h(
        'span',
        {},
        { default: () => dayjs((row.last_update || 0) * 1000).format('YYYY-MM-DD HH:mm') },
      );
    },
  },
];

getNodeStatus();
handleModeChange();
</script>

<template>
  <div class="nodestats">
    <n-card class="main_card" :segmented="true" :header-extra-style="{ height: '100%' }">
      <template #header-extra>
        <div class="detailSwitch">
          <n-button text tag="a" href="//kuma.openfrp.net" target="_blank" icon-placement="right">
            外部状态监测
            <template #icon>
              <n-icon>
                <ExternalLink />
              </n-icon>
            </template>
          </n-button>
          <n-switch v-model:value="detailMode" @update:value="handleModeChange">
            <template #checked>
              <span>详细模式</span>
            </template>
            <template #unchecked>
              <span>简略模式</span>
            </template>
          </n-switch>
        </div>
      </template>
      <template #header>
        <n-flex align="center">
          <span>节点统计</span>
          <n-button
            style="margin-top: 2px"
            text
            title="刷新数据"
            @mousedown="(e: MouseEvent) => e.preventDefault()"
            @click="refreshStatus"
          >
            <n-icon size="large">
              <Refresh />
            </n-icon>
          </n-button>
        </n-flex>
        <n-space style="margin-top: 0.5rem" align="center">
          <n-statistic
            :value="
              numbro(all_total_traffic_out).format({
                output: 'byte',
                base: 'binary',
                mantissa: 2,
                spaceSeparated: true,
              })
            "
          >
            <template #label>
              <div className="usercenter-statistic-label">
                <n-icon size="16">
                  <Upload />
                </n-icon>
                <span>今日总出网</span>
              </div>
            </template>
          </n-statistic>
          <n-statistic
            :value="
              numbro(all_total_traffic_in).format({
                output: 'byte',
                base: 'binary',
                mantissa: 2,
                spaceSeparated: true,
              })
            "
          >
            <template #label>
              <div className="usercenter-statistic-label">
                <n-icon size="16">
                  <Download />
                </n-icon>
                <span>今日总入网</span>
              </div>
            </template>
          </n-statistic>
          <n-statistic>
            <n-number-animation :from="all_total_user / 1.5" :to="all_total_user" />
            <template #label>
              <div className="usercenter-statistic-label">
                <n-icon size="16">
                  <Users />
                </n-icon>
                <span>在线用户</span>
              </div>
            </template>
          </n-statistic>
          <n-statistic>
            <n-number-animation :from="all_total_proxy / 1.5" :to="all_total_proxy" />
            <template #label>
              <div className="usercenter-statistic-label">
                <n-icon size="16">
                  <List />
                </n-icon>
                <span>在线隧道</span>
              </div>
            </template>
          </n-statistic>

          <n-statistic>
            <n-number-animation :from="all_total_node / 1.5" :to="all_total_node" />
            <template #label>
              <div className="usercenter-statistic-label">
                <n-icon size="16">
                  <Server />
                </n-icon>
                <span>在线节点</span>
              </div>
            </template>
          </n-statistic>

          <n-statistic :value="dayjs((lastUpdate || 0) * 1000).format('YYYY-MM-DD HH:mm')">
            <template #label>
              <div className="usercenter-statistic-label">
                <n-icon size="16">
                  <CalendarTime />
                </n-icon>
                <span>更新时间</span>
              </div>
            </template>
          </n-statistic>
        </n-space>
      </template>
      <n-skeleton v-if="!skeletons" text :repeat="8" />
      <n-skeleton v-if="!skeletons" text style="width: 60%" />
      <n-grid v-else cols="1" item-responsive responsive="screen" style="height: 100%">
        <n-gi span="0 s:1">
          <n-data-table
            :columns="showStatusColumns"
            striped
            style="height: 100%; max-width: 100%"
            max-height="100%"
            :data="sourceList"
            :pagination="false"
            flex-height
            :single-line="false"
            :scroll-x="scrollX"
          />
        </n-gi>
        <n-gi span="1 s:0">
          <n-space x-gap="16" vertical>
            <!-- v-for="item in sourceList" -->
            <n-card
              v-for="item in sourceList"
              :key="item.nid"
              footer-style="padding:6px 16px 12px 16px;"
              content-style="padding:12px 16px 0px 16px;"
            >
              <n-space vertical>
                <n-space justify="space-between">
                  <span>#{{ item.nid }} {{ item.name }}</span>
                  <n-tag
                    :bordered="false"
                    :type="
                      codeToState(item.status)?.type == 'warning'
                        ? 'warning'
                        : codeToState(item.status)?.type == 'error'
                          ? 'error'
                          : 'success'
                    "
                    size="small"
                  >
                    {{ codeToState(item.status)?.text }}
                  </n-tag>
                </n-space>

                <n-space>
                  <span class="streamline-baseline">
                    <n-icon :component="Download"></n-icon>
                    {{
                      numbro(item.total_traffic_in).format({
                        output: 'byte',
                        base: 'binary',
                        mantissa: 2,
                        spaceSeparated: true,
                      })
                    }}
                  </span>
                  <span class="streamline-baseline">
                    <n-icon :component="Upload"></n-icon>
                    {{
                      numbro(item.total_traffic_out).format({
                        output: 'byte',
                        base: 'binary',
                        mantissa: 2,
                        spaceSeparated: true,
                      })
                    }}
                  </span>
                  <span class="streamline-baseline">
                    <n-icon :component="CarOutline"></n-icon>
                    {{
                      Math.floor(Number(item.uptime) / 3600 / 24) +
                      ` 天 ` +
                      Math.floor((Number(item.uptime) / 3600) % 24) +
                      ` 小时`
                    }}
                  </span>
                </n-space>
              </n-space>
              <template #footer>
                <n-progress
                  type="line"
                  :percentage="getProgress(getOnlineCount(item.proxy_type_count), item.maxonline)"
                  :status="
                    getColor(getProgress(getOnlineCount(item.proxy_type_count), item.maxonline))
                  "
                  :height="12"
                  :show-indicator="false"
                  :indicator-placement="'inside'"
                >
                </n-progress>
              </template>
            </n-card>
          </n-space>
        </n-gi>
      </n-grid>
    </n-card>
  </div>
</template>
